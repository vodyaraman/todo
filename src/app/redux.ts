// redux.ts
import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

// Типы для задач и авторизации
export interface Task {
  id: number;
  text: string;
  completed: boolean;
  deleted: boolean;
}

export interface AuthState {
  isAuthenticated: boolean;
}

export interface ToDoState {
  tasks: Task[];
  filter: 'all' | 'active' | 'completed' | 'trash';
}

// Auth Slice
export const authSlice = createSlice({
  name: 'auth',
  initialState: { isAuthenticated: false } as AuthState,
  reducers: {
    login: (state) => {
      state.isAuthenticated = true;
    },
    logout: (state) => {
      state.isAuthenticated = false;
    },
  },
});

// To-Do Slice
export const todoSlice = createSlice({
  name: 'todo',
  initialState: { tasks: [], filter: 'all' } as ToDoState,
  reducers: {
    addTask: (state, action: PayloadAction<string>) => {
      const newTask = {
        id: Date.now(),
        text: action.payload,
        completed: false,
        deleted: false,
      };
      state.tasks.push(newTask);
    },
    toggleComplete: (state, action: PayloadAction<number>) => {
      const task = state.tasks.find((t) => t.id === action.payload);
      if (task) task.completed = !task.completed;
    },
    deleteTask: (state, action: PayloadAction<number>) => {
      const task = state.tasks.find((t) => t.id === action.payload);
      if (task) task.deleted = true;
    },
    restoreTask: (state, action: PayloadAction<number>) => {
      const task = state.tasks.find((t) => t.id === action.payload);
      if (task) task.deleted = false;
    },
    deleteAllTasks: (state) => {
      state.tasks = [];
    },
    setFilter: (state, action: PayloadAction<ToDoState['filter']>) => {
      state.filter = action.payload;
    },
    setTasks: (state, action: PayloadAction<Task[]>) => {
      state.tasks = action.payload;
    },
  },
});

// RTK Query API for authentication
export const authApi = createApi({
  reducerPath: 'authApi',
  baseQuery: fetchBaseQuery({ baseUrl: 'https://reqres.in/api/' }),
  endpoints: (builder) => ({
    login: builder.mutation<{ token: string }, { email: string; password: string }>({
      query: (credentials) => ({
        url: 'login',
        method: 'POST',
        body: credentials,
      }),
    }),
    register: builder.mutation<{ id: string; email: string }, { email: string; password: string }>({
      query: (credentials) => ({
        url: 'register',
        method: 'POST',
        body: credentials,
      }),
    }),
  }),
});

// Store configuration
export const store = configureStore({
  reducer: {
    auth: authSlice.reducer,
    todo: todoSlice.reducer,
    [authApi.reducerPath]: authApi.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(authApi.middleware),
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

// Export hooks generated by the authApi
export const { useLoginMutation, useRegisterMutation } = authApi;